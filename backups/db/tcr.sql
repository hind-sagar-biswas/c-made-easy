-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Mar 14, 2023 at 03:53 PM
-- Server version: 10.4.25-MariaDB
-- PHP Version: 8.1.10

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `tcr`
--

-- --------------------------------------------------------

--
-- Table structure for table `c_sections`
--

CREATE TABLE `c_sections` (
  `id` int(225) NOT NULL,
  `serial` int(225) NOT NULL,
  `title` varchar(225) NOT NULL,
  `explanation` text NOT NULL DEFAULT 'No explanation added',
  `content` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `c_sections`
--

INSERT INTO `c_sections` (`id`, `serial`, `title`, `explanation`, `content`) VALUES
(1, 1, 'Boilerplate code', '<p>\r\n                    Boilerplate code is a term used to describe chunks of code that are copied and pasted multiple times\r\n                    in a software\r\n                    program. It\'s like having a recipe that you use over and over again for different dishes.\r\n</p>', '<div class=\"subsection\">\r\n                <div class=\"code\">\r\n                    <h3 class=\"section-subtitle\">Type 1</h3>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h>\r\n\r\nint main()\r\n{\r\n    return 0;\r\n}</code></pre>\r\n                <h3 class=\"section-subtitle\">Type 2</h3>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h>\r\n#include &lt;conio.h>\r\n\r\nint main()\r\n{\r\n    getch();\r\n}</code></pre>\r\n                </div>\r\n            </div>'),
(2, 2, 'Comments', '<p>\r\n        In programming, comments are text that are added to the code to explain what the code does, provide additional information, or make notes for future reference. They are not executed as part of the program, so they do not affect the program\'s functionality.\r\n        <br>\r\n        Comments are useful for several reasons. First, they make the code easier to read and understand, especially for other programmers who may be working on the same project. Second, comments can help identify potential bugs or issues in the code, and provide solutions or workarounds.\r\n        <br>\r\n        In C programming, there are two types of comments: single-line comments and multi-line comments.\r\n    </p>', '<div class=\"subsection\">\r\n        <h3 class=\"section-subtitle\">Single line:</h3>\r\n        <pre><code class=\"language-c\">// This is a single-line comment</code></pre>\r\n        <h3 class=\"section-subtitle\">Multi line:</h3>\r\n        <pre><code class=\"language-c\">/* This is a\r\n   multi-line comment */</code></pre>\r\n    </div>'),
(3, 3, 'Variables', '<p>\r\n        In C programming, a variable is a container that can hold a value or data. It\'s like a box that can store different things inside it, such as numbers, letters, or words.\r\n        <br>\r\n        Each variable has a unique name that identifies it, and we can use this name to refer to the value stored inside the variable.\r\n        <br>\r\n        For example, let\'s say we want to store the number 10 in a variable called \"myNumber\". We can do that by writing:\r\n    </p>\r\n    <pre><code class=\"language-c\">int age = 25;</code></pre>\r\n    <p>\r\n        In this case, \"int\" is the data type, which stands for integer (a whole number), and \"myNumber\" is the name of the variable. We are assigning the value 10 to the variable.\r\n        <br>\r\n        Variables are useful because they allow us to store and manipulate data in our program. We can change the value stored inside a variable as many times as we want, and we can use variables in different parts of our program to perform different operations.\r\n        <br>\r\n        Variables can also be used to make our programs more dynamic and interactive. For example, we can ask the user to enter a value, store it in a variable, and then use that value to perform calculations or display information on the screen.\r\n    </p>', '<div class=\"subsection\">\r\n        <h3 class=\"section-subtitle\">Declare and Assign</h3>\r\n        <p>In C programming, declaring a variable means creating a new variable with a specific data type and name. The purpose of declaring a variable is to reserve a memory location for that variable so that we can store data in it. To store data is called \"Assigning\".</p>\r\n        <p><strong>Structure:</strong> <span class=\"mono bold\"><span class=\"blue\">data_type</span> variableName = <span class=\"purple\">value</span> ;</span></p>\r\n        <p>This tells the compiler to set aside a memory location to store an integer value with the name \"variableName\" and assign the value of \"value\" to it.</p>\r\n        <pre><code class=\"language-c\">//single line declare with assign:\r\nint numOne = 5;\r\n\r\n// declare then assign\r\nint numOne;\r\nnumOne = 5;\r\n\r\n// multiple variables declare in same line\r\nint numOne = 5, numTwo = 2;\r\n\r\n// multiple variables declare in multiple line\r\nint numOne = 5;\r\nint numTwo = 2;\r\n</code></pre>\r\n    </div>\r\n\r\n\r\n    <div class=\"subsection\">\r\n        <h3 class=\"section-subtitle\">Calls</h3>\r\n        <p>On the other hand, calling a variable means accessing the value stored in the variable. To do this, we simply use the name of the variable.\r\n            <br>\r\n            For example, if we wanted to use the value stored in \"numOne\" and \"numTwo\" in a calculation, we could write:\r\n        </p>\r\n        <pre><code class=\"language-c\">int result = numOne + numTwo + 5;</code></pre>\r\n        <p>This tells the compiler to add the value stored in \"numOne\" and \"numTwo\" to 5 and store the result in a new variable called \"result\". So the value in result will be `5 + 2 + 5 = 12`</p>\r\n    </div>'),
(4, 4, 'Data Types', '<p>In C programming, data types are used to tell the computer what kind of data we are working with.\r\n\r\n            The most common data types are:\r\n        <ul>\r\n            <li>\r\n                <b>Integers:</b>\r\n                These are whole numbers, like 5, 10, or -3. They are stored in memory as a fixed amount of space, depending on\r\n                the specific integer type used. For example, an \"int\" data type in C can store numbers between -2147483648 and\r\n                2147483647.\r\n            </li>\r\n            <li>\r\n                <b>Floating-point numbers:</b>\r\n                These are numbers with a decimal point, like 3.14 or -1.5. They are stored in memory as a fixed\r\n                amount of space, depending on the specific floating-point type used. For example, a \"float\" data type in C can store\r\n                numbers with up to 6 decimal places, while a \"double\" data type can store numbers with up to 15 decimal places.\r\n            </li>\r\n            <li>\r\n                <b>Characters:</b>\r\n                These are individual letters or symbols, like \'a\', \'b\', or \'%\'. They are stored in memory as a single byte.\r\n            </li>\r\n            <li>\r\n                <b>Boolean:</b>\r\n                This is a data type that can only be either \"true\" or \"false\". It is used in conditional statements to make\r\n                decisions in the code.\r\n            </li>\r\n        </ul>\r\n        When we use a variable in our code, we have to tell the computer what kind of data it will be storing. For example, if\r\n        we want to store a person\'s age in a variable, we might use the \"int\" data type, like this:</p>\r\n\r\n        <pre><code class=\"language-c\">int age = 25;</code></pre>\r\n        <p>This tells the computer to allocate a certain amount of memory to store the number 25 as an integer value.\r\n            <br>\r\n            Data types might seem a little confusing at first, but they are important for making sure our code works correctly and\r\n            efficiently.\r\n        </p>', '<div class=\"subsection\">\r\n        <h3 class=\"section-subt\">Numerical</h3>\r\n        <p>There are basically 3 types of numerical data types, one of which is for full numbers and other 2 are for decimal points.</p>\r\n        <strong>Format specifiers: </strong>\r\n        <ul>\r\n            <li>integer: %d</li>\r\n            <li>float: %f</li>\r\n            <li>double: %lf</li>\r\n        </ul>\r\n        <pre><code class=\"language-c\">int aFullNum = 50; // integer\r\nfloat aDecimal = 10.45; // floating point\r\ndouble anotherDecimal = 3.2f // double (must have \'f\' at the end)\r\n</code></pre>\r\n    </div>\r\n\r\n    <div class=\"subsection\">\r\n        <h3 class=\"section-subt\">Alphabetical</h3>\r\n        <p>There are basically 2 types of numerical data types. Alphabets called Characters and Sentences called String.</p>\r\n        <strong>Format specifiers: </strong>\r\n        <ul>\r\n            <li>character: %c</li>\r\n            <li>string: %s</li>\r\n        </ul>\r\n        <pre><code class=\"language-c\">char aCharacter = \'A\'; // can have 1 alphabet and is bound by \'\'\r\nchar aSentence[] = \"Hello, world\"; // must have [] after name and bound by \"\"\r\n</code></pre>\r\n    </div>\r\n\r\n    <div class=\"subsection\">\r\n        <h3 class=\"section-subt\">True-False</h3>\r\n        <p><strong>Header file:</strong> stdbool.h</p>\r\n        <p>True-False is called Boolean in Programming. You need to add <span class=\"mono bold\"><span class=\"red\">#</span><span class=\"blue\">include</span> <span class=\"green\">&lt;stdbool.h&gt;</span></span> to use booleans.</p>\r\n        <strong>Format specifiers: </strong>\r\n        <ul>\r\n            <li>boolean: %d (same as integers)</li>\r\n        </ul>\r\n        <pre><code class=\"language-c\">// True (both \'true\' and non-zero number means true)\r\nbool isTCRBest = true;\r\nbool canIDoIt = 1;\r\nbool isItOk = 5;\r\n\r\n// False (both \'false\' and 0 means false)\r\nbool isBanglaEasy = false;\r\nbool isExamGood = 0;\r\n</code></pre>\r\n    </div>'),
(5, 5, 'Output', 'In C programming, <span class=\"mono bold\"><span class=\"yellow\">printf</span>()</span> is a function that is used to print (display) information on the screen. <i>It stands for <b>\"print formatted\"</b></i> and is a commonly used function for displaying output in the console.', '<div class=\"subsection\">\r\n        <h3 class=\"section-subheading\">Standard syntax:</h3>\r\n        <pre><code class=\"language-c\">printf(\"format string\", variable1, variable2, ...);\r\n</code></pre>\r\n        <p>Here, the format string is a string of characters that specifies how the output should be formatted, and the variables are the values that we want to display.</p>\r\n    </div>\r\n\r\n    <div class=\"subsection\">\r\n        <h3 class=\"section-subheading\">Printing simple string:</h3>\r\n        <pre><code class=\"language-c\">printf(\"Hello, world\");\r\n</code></pre>\r\n        <h4>Output:</h4>\r\n        <div class=\"console\">Hello, world</div>\r\n    </div>\r\n\r\n    <div class=\"subsection\">\r\n        <h3 class=\"section-subheading\">Printing variables:</h3>\r\n        <p>We can also use <span class=\"mono bold\"><span class=\"yellow\">printf</span>()</span> to display variables with different data types, such as integers, floats, or characters. To do this, we use format specifiers in the format string, which tell <span class=\"mono bold\"><span class=\"yellow\">printf</span>()</span> how to format the output for each variable.</p>\r\n        <pre><code class=\"language-c\">int myNumber = 10;\r\nprintf(\"%d\", myNumber); // printing only variable\r\nprintf(\"\\nMy number is %d !\", myNumber); // printing variable in string</code></pre>\r\n        <h4>Output:</h4>\r\n        <div class=\"console\">10 <br>My number is 10 !</div>\r\n        <p>The %d format specifier tells printf() to expect an integer variable, and the variable name \"myNumber\" is included after the format string, separated by a comma. When the program is run, printf() will replace %d with the value of \"myNumber\" and display the result on the screen. In this case, it would display \"My number is 10\".</p>\r\n    </div>'),
(6, 6, 'Escape Characters', '<p>In C programming, escape characters are special characters that are used to represent certain non-printable or reserved characters in a string. They are typically represented by a backslash (\\) followed by a single character or code.</p>\r\n        <p>For example, if we want to print a string that includes a double quote character, we can use the escape character <span class=\"mono bold\">\\\"</span> to represent it.</p>\r\n        <pre><code class=\"language-c\">printf(\"She said, \\\"Hello!\\\"\");</code></pre>\r\n        It will give the following output:\r\n        <div class=\"console\">She said, \"Hello!</div>', '<p>Most commonly used ones are:\r\n    <ul>\r\n        <li><span class=\"mono bold\">\\n</span>: newline character</li>\r\n        <li><span class=\"mono bold\">\\t</span>: tab character</li>\r\n        <li><span class=\"mono bold\">\\\\</span>: backslash character</li>\r\n        <li><span class=\"mono bold\">\\\"</span>: double quote character</li>\r\n        <li><span class=\"mono bold\">\\\'</span>: single quote character</li>\r\n        <li><span class=\"mono bold\">\\b</span>: backspace character</li>\r\n        <li><span class=\"mono bold\">\\r</span>: carriage return character</li>\r\n    </ul>\r\n    </p>\r\n\r\n    <div class=\"subsection\">\r\n        <h3 class=\"section-subheading\">New line</h3>\r\n        <pre><code class=\"language-c\">printf(\"This is line 1.\\nThis is line 2.\");\r\n</code></pre>\r\n        <h4>Output</h4>\r\n        <div class=\"console\">This is line 1. <br>\r\n            This is line 2.</div>\r\n    </div>'),
(7, 8, 'Operators', '        <p>In C, operators are symbols that represent actions or operations that can be performed on variables or values</p>\r\n', '<div class=\"subsection\">\n        <h3 class=\"section-subheading\">Arithmatic operators</h3>\n        <p><strong>1.</strong> Addition</p>\n        <pre><code class=\"language-c\">int a = 5;\nint b = 7;\nint sum = a + b; // The value of sum is 12.</code></pre>\n        <p><strong>2.</strong> Substraction</p>\n        <pre><code class=\"language-c\">int a = 10;\nint b = 3;\nint diff = a - b; // The value of diff is 7.</code></pre>\n        <p><strong>3.</strong> Multiplication</p>\n        <pre><code class=\"language-c\">int a = 4;\nint b = 5;\nint product = a * b; // The value of product is 20.</code></pre>\n        <p><strong>4.</strong> Division</p>\n        <pre><code class=\"language-c\">int a = 20;\nint b = 4;\nint quotient = a / b; // The value of quotient is 5.</code></pre>\n        <p><strong>5.</strong> Modulo (Remainder)</p>\n        <pre><code class=\"language-c\">int a = 25;\nint b = 7;\nint remainder = a % b; // The value of remainder is 4.</code></pre>\n    </div>\n\n    <div class=\"subsection\">\n        <h3 class=\"section-subheading\">Assignment operators</h3>\n        <details>\n            <summary>See Explaination</summary>\n            <ul>\n                <li><span class=\"mono bold\">=</span> : Simple assignment operator. Assigns the value on the right to the variable on the left. Example: x = 5;</li>\n                <li><span class=\"mono bold\">+=</span> : Adds the value on the right to the variable on the left and assigns the result to the variable on the left. Example: x += 2; (equivalent to x = x + 2;)</li>\n                <li><span class=\"mono bold\">-=</span> : Subtracts the value on the right from the variable on the left and assigns the result to the variable on the left. Example: x -= 3; (equivalent to x = x - 3;)</li>\n                <li><span class=\"mono bold\">*=</span> : Multiplies the variable on the left by the value on the right and assigns the result to the variable on the left. Example: x *= 4; (equivalent to x = x * 4;)</li>\n                <li><span class=\"mono bold\">/=</span> : Divides the variable on the left by the value on the right and assigns the result to the variable on the left. Example: x /= 2; (equivalent to x = x / 2;)</li>\n                <li><span class=\"mono bold\">%=</span> : Computes the modulus of the variable on the left with the value on the right and assigns the result to the variable on the left. Example: x %= 3; (equivalent to x = x % 3;)</li>\n            </ul>\n        </details>\n        <pre><code class=\"language-c\">int a = 5; // simple assignment | result => a = 5\na += 2;    // a = a + 2 | result => a = 7\na -= 3;    // a = a - 3 | result => a = 2\na *= 4;    // a = a * 4 | result => a = 20\na /= 2;    // a = a / 2 | result => a = 2.5\na %= 3;    // a = a % 3 | result => a = 1</code></pre>\n    </div>\n\n\n    <div class=\"subsection\">\n        <h3 class=\"section-subheading\">Comparison Operators</h3>\n        <p>These are mostly used in <a href=\"#sl-9\" class=\"same-pg-link\">conditionals</a>.</p>\n        <ol>\n            <li><span class=\"mono bold\">&gt;</span> <i>[Greater than]</i>: This operator checks if the left operand is greater than the right operand.</li>\n            <li><span class=\"mono bold\">&lt;</span> <i>[Less than]</i>: This operator checks if the left operand is less than the right operand.</li>\n            <li><span class=\"mono bold\">&gt;=</span> <i>[Grater than or equal to]</i>: This operator checks if the left operand is greater than or equal to the right operand.</li>\n            <li><span class=\"mono bold\">&lt;=</span> <i>[Less than or equal to]</i>: This operator checks if the left operand is less than or equal to the right operand.</li>\n            <li><span class=\"mono bold\">==</span> <i>[Equal to]</i>: This operator checks if the two operands are equal.</li>\n            <li><span class=\"mono bold\">!=</span> <i>[Not equal to]</i>: This operator checks if the two operands are not equal.\n            </li>\n        </ol>\n        <h4>Exapmle code</h4>\n        <pre><code class=\"language-c\">int x = 5;\nint y = 3;\nprintf(\"%d\", x > y); // returns 1 (true) because 5 is greater than 3</code></pre>\n        <h4>Output</h4>\n        <div class=\"console\">1</div>\n    </div>\n\n    <div class=\"subsection\">\n        <h3 class=\"section-subheading\">Logical operators</h3>\n        <p><strong>1. Logical AND (&&):</strong> This operator performs a logical AND operation on two expressions. The result is true if both expressions evaluate to true.</p>\n        <pre><code class=\"language-c\">int a = 5;\nint b = 3;\nif (a > 3 && b > 1) {\n   printf(\"Both conditions are true\\n\");\n}</code></pre>\n        <h4>Truth Table</h4>\n        <table class=\"truth-table\">\n            <tr>\n                <th>A</th>\n                <th>B</th>\n                <th>A && B</th>\n            </tr>\n            <tr>\n                <td class=\"red\">False</td>\n                <td class=\"red\">False</td>\n                <td class=\"red\">False</td>\n            </tr>\n            <tr>\n                <td class=\"red\">False</td>\n                <td class=\"green\">True</td>\n                <td class=\"red\">False</td>\n            </tr>\n            <tr>\n                <td class=\"green\">True</td>\n                <td class=\"red\">False</td>\n                <td class=\"red\">False</td>\n            </tr>\n            <tr>\n                <td class=\"green\">True</td>\n                <td class=\"green\">True</td>\n                <td class=\"green\">True</td>\n            </tr>\n        </table>\n\n        <br>\n\n        <p><strong>2. Logical OR (||):</strong> This operator performs a logical OR operation on two expressions. The result is true if at least one expression evaluates to true.</p>\n        <pre><code class=\"language-c\">int a = 5;\nint b = 3;\nif (a > 3 || b > 5) {\n   printf(\"At least one condition is true\\n\");\n}</code></pre>\n        <h4>Truth Table</h4>\n        <table class=\"truth-table\">\n            <tr>\n                <th>A</th>\n                <th>B</th>\n                <th>A || B</th>\n            </tr>\n            <tr>\n                <td class=\"red\">False</td>\n                <td class=\"red\">False</td>\n                <td class=\"red\">False</td>\n            </tr>\n            <tr>\n                <td class=\"red\">False</td>\n                <td class=\"green\">True</td>\n                <td class=\"green\">True</td>\n            </tr>\n            <tr>\n                <td class=\"green\">True</td>\n                <td class=\"red\">False</td>\n                <td class=\"green\">True</td>\n            </tr>\n            <tr>\n                <td class=\"green\">True</td>\n                <td class=\"green\">True</td>\n                <td class=\"green\">True</td>\n            </tr>\n        </table>\n\n        <br>\n\n        <p><strong>3. Logical NOT (!):</strong> This operator performs a logical NOT operation on an expression. The result is true if the expression is false, and false if the expression is true.</p>\n        <pre><code class=\"language-c\">int a = 5;\nint b = 3;\nif (!(a > 3 && b > 5)) {\n   printf(\"The condition is not true\\n\");\n}</code></pre>\n        <h4>Truth Table</h4>\n        <table class=\"truth-table\">\n            <tr>\n                <th>A</th>\n                <th>!A</th>\n            </tr>\n            <tr>\n                <td class=\"red\">False</td>\n                <td class=\"green\">True</td>\n            </tr>\n            <tr>\n                <td class=\"green\">True</td>\n                <td class=\"red\">False</td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"subsection\">\n        <h3 class=\"section-subheading\">Increament and Decreament</h3>\n\n        <details>\n            <summary>Note</summary>\n            Note that the increment and decrement operators can be used in both postfix and prefix forms. The postfix form evaluates the expression and then increments or decrements the variable, while the prefix form increments or decrements the variable and then evaluates the expression.\n        </details>\n\n        <p><strong>1.</strong> Increament: <span class=\"mono bold\">++</span> This operator increases the value of a variable by 1.</p>\n        <pre><code class=\"language-c\">int a = 5;\na++; // The value of a is now 6.</code></pre>\n        <pre><code class=\"language-c\">int a = 5;\nint b = ++a; // The value of b is 6 and a is now 6.</code></pre>\n        <pre><code class=\"language-c\">int a = 5;\nint b = a++; // The value of b is 5 and a is now 6.</code></pre>\n\n        <p><strong>2.</strong> Decreament: <span class=\"mono bold\">--</span> This operator decreases the value of a variable by 1.</p>\n        <pre><code class=\"language-c\">int a = 5;\na--; // The value of a is now 4.</code></pre>\n        <pre><code class=\"language-c\">int a = 5;\nint b = --a; // The value of b is 4 and a is now 4.</code></pre>\n        <pre><code class=\"language-c\">int a = 5;\nint b = a--; // The value of b is 5 and a is now 4.</code></pre>\n    </div>'),
(8, 9, 'Conditionals', '<p>Conditional statements in C allow a program to make decisions based on certain conditions. For\r\n                        example, let\'s say you want to write a program that determines whether a person is old enough to\r\n                        vote. You could use a conditional statement to do this:</p>\r\n<pre><code class=\"language-c\">int age = 18; // age of the person\r\nif (age >= 18) {\r\n    printf(\"You are old enough to vote!\");\r\n} else {\r\n    printf(\"Sorry, you are not old enough to vote yet.\");\r\n}</code></pre>\r\n                    <p>In this example, the if statement checks whether age is greater than or equal to 18. If the\r\n                        condition is true, meaning\r\n                        the person is 18 or older, the program will print \"You are old enough to vote!\". If the\r\n                        condition is false, meaning the\r\n                        person is younger than 18, the program will print \"Sorry, you are not old enough to vote yet.\".\r\n                    </p>', '<div class=\"subsection\">\n                    <h3 class=\"section-subheading\">If statement</h3>\n<pre><code class=\"language-c\">int x = 10;\nif (x > 0) {\nprintf(\"x is positive\\n\");\n}</code></pre>\n<h4>Output</h4>\n<div class=\"console\">x is positive</div>\n                </div>\n\n                <div class=\"subsection\">\n                    <h3 class=\"section-subheading\">If else statement</h3>\n<pre><code class=\"language-c\">int x = -5;\nif (x > 0) {\nprintf(\"x is positive\\n\");\n} else {\nprintf(\"x is not positive\\n\");\n}</code></pre>\n<h4>Output</h4>\n<div class=\"console\">x is not positive</div>\n                </div>\n\n                <div class=\"subsection\">\n                    <h3 class=\"section-subheading\">Else if statement</h3>\n<pre><code class=\"language-c\">int x = 0;\nif (x > 0) {\n  printf(\"x is positive\\n\");\n} else if (x < 0) {\n  printf(\"x is negative\\n\");\n} else {\n  printf(\"x is zero\\n\");\n}</code></pre>\n<h4>Output</h4>\n<div class=\"console\">x is zero</div>\n                </div>\n\n                <div class=\"subsection\">\n                    <h3 class=\"section-subheading\">Short-hand if statement</h3>\n                    <h4>Structure</h4>\n                    <div class=\"mono bold\">(condition) ? (expression1) : (expression2);</div>\n<pre><code class=\"language-c\">int x = 5, y;\n\n// if x is greater than 2, set y to 10, otherwise set y to 0\ny = (x > 2) ? 10 : 0;\nprintf(\"y = %d\\n\", y);</code></pre>\n<h4>Output</h4>\n<div class=\"console\">y = 10</div>\n                </div>\n\n                <div class=\"subsection\">\n                    <h3 class=\"section-subheading\">Switch statement</h3>\n<pre><code class=\"language-c\">int day = 3;\nswitch (day) {\n  case 1:\n    printf(\"Monday\\n\");\n    break;\n  case 2:\n    printf(\"Tuesday\\n\");\n    break;\n  case 3:\n    printf(\"Wednesday\\n\");\n    break;\n  case 4:\n    printf(\"Thursday\\n\");\n    break;\n  case 5:\n    printf(\"Friday\\n\");\n    break;\n  case 6:\n    printf(\"Saturday\\n\");\n    break;\n  case 7:\n    printf(\"Sunday\\n\");\n    break;\n  default:\n    printf(\"Invalid day\\n\");\n    break;\n}</code></pre>\n<h4>Output</h4>\n<div class=\"console\">Wednesday</div>\n                </div>'),
(9, 7, 'User inputs', 'In C, you can take input from the user using the scanf() function. The scanf() function reads input from the standard input stream (usually the keyboard) and stores it in the specified variables.', '<div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Standard syntax:</h3>\r\n                    <pre><code class=\"language-c\">scanf(\"format string\", &variable1, &variable2, ...);</code></pre>\r\n                    <p>The \"format string\" specifies the format of the input expected, and the & operator is used to get the memory address of the variable in which the input will be stored.</p>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Getting Input (single variable):</h3>\r\n<pre><code class=\"language-c\">int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &num);\r\nprintf(\"\\nYour number is %d!\", num);</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">Enter a number: 46 <br>Your number is 46!</div>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Getting Input (multiple variable):</h3>\r\n<pre><code class=\"language-c\">int a, b;\r\nprintf(\"Enter 2 number: \");\r\nscanf(\"%d %d\", &a, &b);\r\nprintf(\"\\nYour numbers are %d, %d!\", a, b);</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">Enter 2 number: 7 34 <br>Your numbers are 7, 34!</div>\r\n                </div>'),
(10, 10, 'Loops', '<p>Loops are a programming concept used to repeat a block of code multiple times. Loops allow you to avoid writing\r\n                    repetitive code by automating the process of repeating a set of instructions.\r\n                    <br>\r\n                    In C, loops are used to repeat a block of code until a certain condition is met.</p>', '<div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">For loop</h3>\r\n                    <p>The <span class=\"mono\">for</span> loop is used when you know the number of times you want to execute a block of code. It has three parts:\r\n                    initialization, condition, and update. The loop continues executing as long as the condition is true.</p>\r\n                    <h4>Basic structure</h4>\r\n                    <pre><code class=\"language-c\">for(initialization; condition; update) { /* code block */ }</code></pre>\r\n                    <h4>Code</h4>\r\n<pre><code class=\"language-c\">for (int i = 0; i &lt; 5; i++) {\r\n   // Code to be executed repeatedly\r\n}\r\n</code></pre>\r\n                    <h4>Example</h4>\r\n<pre><code class=\"language-c\">for (int i = 1; i &lt;= 5; i++) {\r\n  printf(\"%d\\n\", i);\r\n}</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">1 <br>2 <br>3 <br>4 <br>5</div>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">While loop</h3>\r\n                    <p>The <span class=\"mono\">while</span> loop is used when you want to execute a block of code as long as a certain condition is true.</p>\r\n                    <h4>Code</h4>\r\n<pre><code class=\"language-c\">int i = 0;\r\nwhile (i &lt; 5) {\r\n   // Code to be executed repeatedly\r\n   i++;\r\n}</code></pre>\r\n                    <h4>Example</h4>\r\n<pre><code class=\"language-c\">int i = 1;\r\nwhile (i <= 5) {\r\n  printf(\"%d\\n\", i);\r\n  i++;\r\n}</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">1 <br>2 <br>3 <br>4 <br>5</div>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Do-while loop</h3>\r\n                    <p>The <span class=\"mono\">do-while</span> loop is similar to the <span class=\"mono\">while</span> loop, but the block of code is executed at least once before checking the\r\n                    condition.</p>\r\n                    <h4>Code</h4>\r\n<pre><code class=\"language-c\">int i = 0;\r\ndo {\r\n// Code to be executed repeatedly\r\ni++;\r\n} while (i &lt; 5);</code></pre>\r\n                    <h4>Example</h4>\r\n<pre><code class=\"language-c\">int i = 1;\r\ndo {\r\n  printf(\"%d\\n\", i);\r\n  i++;\r\n} while (i &lt;= 5);</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">1 <br>2 <br>3 <br>4 <br>5</div>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Break statement</h3>\r\n                    <p>In C programming, the <span class=\"mono\">break</span> statement is used to exit from a loop prematurely. When a <span class=\"mono\">break</span> statement is encountered\r\n                    inside a loop, the loop is terminated and the program execution continues with the next statement after the loop.</p>\r\n<pre><code class=\"language-c\">int i = 1;\r\n\r\nwhile (i &lt;= 10) {\r\n    printf(\"%d\\n\", i);\r\n    i++;\r\n\r\n    if (i == 5) {\r\n        break;  // exit the loop when i equals 5\r\n    }\r\n}\r\n\r\nprintf(\"Loop finished.\\n\");</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">1 <br>2 <br>3 <br>4 <br>Loop finished.</div>\r\n                    <p>The loop starts with <span class=\"mono\">i</span> equal to 1, and then runs as long as <span class=\"mono\">i</span> is less than or equal to 5. The if statement inside the\r\n                    loop checks if <span class=\"mono\">i</span> is equal to 5, and if so, it executes the break statement, which causes the loop to terminate early.\r\n                    Since <span class=\"mono\">i</span> reaches 5 in the fourth iteration of the loop, the break statement is executed at that point, and the loop\r\n                    terminates before printing the value of <span class=\"mono\">i</span> for that iteration. Thus, the output consists of the values of <span class=\"mono\">i</span> for the first\r\n                    four iterations of the loop: 1, 2, 3, and 4.</p>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Continue statement</h3>\r\n                    <p>In C programming language, the <span class=\"mono\">continue</span> statement is used to skip the current iteration of a loop and continue with the\r\n                    next iteration. It is often used in loops when you want to skip some specific iterations and execute the remaining\r\n                    iterations.</p>\r\n<pre><code class=\"language-c\">int i;\r\n\r\n    for (i = 1; i <= 10; i++) {\r\n        if (i == 5) {\r\n            continue;  // skip the current iteration when i is 5\r\n        }\r\n\r\n        printf(\"%d \", i);\r\n    }\r\n</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">1 2 3 4 6 7 8 9 10</div>\r\n                    <p>In this code, a for loop is used to print numbers from 1 to 10. However, when the loop variable <span class=\"mono\">continue</span> is equal to 5, the\r\n                    continue statement is executed, which skips the remaining statements in the loop for that particular iteration and jumps\r\n                    to the next iteration. As a result, the number 5 is skipped in the output.</p>\r\n                </div>'),
(11, 11, 'Array', '<p>In C programming language, an array is a collection of similar data items stored in contiguous memory locations. Each\r\n                    item in an array is accessed using an index or a subscript value, which represents its position within the array.\r\n                    <br>\r\n                    Arrays are useful when working with large amounts of data that need to be stored and accessed efficiently. They provide\r\n                    a way to store multiple values of the same data type under a single variable name.\r\n                    <br>\r\n                    Arrays in C can be one-dimensional, two-dimensional, or multi-dimensional. A one-dimensional array is a simple list of\r\n                    values, while a two-dimensional array is a table-like structure with rows and columns. A multi-dimensional array can\r\n                    have three or more dimensions, and can be visualized as a set of nested tables.\r\n                    <br>\r\n                    Here is an example of declaring and initializing a one-dimensional array in C:</p>\r\n                    <pre><code class=\"language-c\">int numbers[5] = {1, 2, 3, 4, 5};</code></pre>\r\n                    <p>In this example, an array named <span class=\"mono\">numbers</span> is declared with a size of 5 elements, and is initialized with the values 1\r\n                    through 5.\r\n                    <br><br>\r\n                    To access an individual element in an array, you use the index of the element you want to access. For example, to access\r\n                    the third element in the numbers array, you would use the following code:</p>\r\n                    <pre><code class=\"language-c\">int x = numbers[2]; // x will be 3</code></pre>\r\n                    <p>In C, array indices start at 0, so the index of the first element in an array is 0, the index of the second element is\r\n                    1, and so on.\r\n                    <br>\r\n                    Arrays in C can also be passed as parameters to functions, allowing functions to work with large amounts of data without\r\n                    the need to create individual variables for each value.</p>', '<div class=\"subsection\">\r\n                    <h3 class=\"section-subtitle\">Declare and Initializing</h3>\r\n                    <p>To declare an array in C, you need to specify the data type of the array and its size.</p>\r\n                    <h4>Basic Syntax</h4>\r\n                <pre><code class=\"language-c\">data_type array_name[n] = {data_1, data_2, data_3, ... , data_n}; // 1 Dimentional Arrays\r\ndata_type array_name[r][c] = {\r\n    {data_1, data_2, data_3, ... , data_c},\r\n    {data_1, data_2, data_3, ... , data_c}\r\n}; // 2 Dimentional Arrays</code></pre>\r\n                <p>Here <span class=\"mono\">n</span> is the number of data you want to store. <span class=\"mono\">c</span> and <span class=\"mono\">r</span> are number of rows and columns respectively</p>\r\n                    <h4>Code</h4>\r\n                <pre><code class=\"language-c\">int numbers[5] = {1, 2, 3, 4, 5}; // 1D array\r\nint arr[3][2] = {{1, 2}, {3, 4}, {5, 6}}; // 2D array</code></pre>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Access Elements</h3>\r\n                    <p>You can access elements of an array using their index. In C, array indices start at 0.</p>\r\n<pre><code class=\"language-c\">int numbers[5] = {1, 2, 3, 4, 5};\r\nint arr[3][2] = {{1, 2}, {3, 4}, {5, 6}};\r\n\r\nint firstNumber = numbers[0]; // accessing 1D arrays\r\nint numFrom2d = arr[2][1]; // accessing 2D arrays\r\n\r\nprintf(\"Element at numbers[0]: %d\\n\", firstNumber);\r\nprintf(\"Element at arr[2][1]: %d\\n\", numFrom2d);</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">Element at numbers[0]: 1<br>Element at arr[2][1]: 6</div>\r\n                    <p>Here, <span class=\"mono\">number[<span class=\"purple\">0</span>]</span> refers to element at 0th <i>(i.e. 1st number)</i> position of <span class=\"mono\">number</span> array i.e. 1.</p>\r\n                    <p>The 2 in <span class=\"mono\">arr[<span class=\"purple\">2</span>][<span class=\"purple\">1</span>]</span> refers to the array/row/elements at 2nd <i>(i.e. 3rd number)</i> position which is <span class=\"mono\">{<span class=\"purple\">5</span>, <span class=\"purple\">6</span>}</span> and 1 refers to the element at the 1st position <i>(i.e. 2nd number)</i> of <span class=\"mono\">{<span class=\"purple\">5</span>, <span class=\"purple\">6</span>}</span> that is 6</p>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Change Elements</h3>\r\n                    <p>You can change the value of an array element by assigning a new value to it.</p>\r\n<pre><code class=\"language-c\">int numbers[5] = {1, 2, 3, 4, 5};\r\nnumbers[0] = 10;</code></pre>\r\n                    <p>In this example, we change the value of the first element of the <span class=\"mono\">numbers</span> array from 1 to 10.</p>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Loop Through Array</h3>\r\n<pre><code class=\"language-c\">int numbers[5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", numbers[i]);\r\n}</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">1 2 3 4 5 </div>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Length of Array</h3>\r\n                    <p>In C, there is no built-in way to find the length of an array. However, you can calculate the length of an array by\r\n                    dividing the size of the array in bytes by the size of one element of the array.</p>\r\n<pre><code class=\"language-c\">int numbers[5] = {1, 2, 3, 4, 5};\r\nint length = sizeof(numbers) / sizeof(int);\r\nprintf(\"%d\", length);</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">5</div>\r\n                    <p>In this example, we calculate the length of the <span class=\"mono\">numbers</span> array by dividing the size of the array in bytes by the size of\r\n                    an integer (which is 4 bytes on most systems). The result is 5, which is the length of the array.</p>\r\n                </div>'),
(12, 12, 'Functions', '<p>A function in C is a block of code that performs a specific task. It has a name, a return type, and may accept zero or\r\n                    more parameters. Functions are used to break up large programs into smaller, more manageable pieces.</p>', '<div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Creating Function</h3>\r\n                    <h4>Basic Structure</h4>\r\n<pre><code class=\"language-c\">return_type function_name(parameter1, parameter2, ...){\r\n    // Function body\r\n    // Statements to be executed\r\n    return value; // Optional return statement\r\n}</code></pre>\r\n                    <p><span class=\"mono\">return_type</span> is the data type of the value that the function returns. It can be any\r\n                        valid C data type, including void if the function doesn\'t return a value.</p>\r\n                    <p><span class=\"mono\">function_name</span> is the name of the function, which is used to call the function from\r\n                        other parts of the program.</p>\r\n                    <p><span class=\"mono\">parameter_1</span>, <span class=\"mono\">parameter_2</span>, etc. are the inputs to the\r\n                        function, which can be used by the function to perform its task.</p>\r\n                \r\n                    <h4 >Code</h4>\r\n<pre><code class=\"language-c\">int add(int num1, int num2) {\r\n    int sum = num1 + num2;\r\n    return sum;\r\n}</code></pre>\r\n                    <p><span class=\"mono blue\">int</span> is the return type of the function <span class=\"mono\"><span class=\"yellow\">add</span>()</span>. The function takes two parameters <span class=\"mono\">num1</span> and <span class=\"mono\">num2</span>, and returns their sum with <span class=\"mono\"><span class=\"blue\">return</span> sum;</span>. The\r\n                    body of the function calculates the sum and returns it using the return statement.</p>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Calling Function</h3>\r\n<pre><code class=\"language-c\">int result = add(5, 7); // The function is called by its name then () and values to pass in them\r\nprintf(\"Sum = %d\", result);</code></pre>\r\n                    <h4>Output</h4>\r\n                    <div class=\"console\">Sum = 12</div>\r\n                </div>\r\n\r\n                <div class=\"subsection\">\r\n                    <h3 class=\"section-subheading\">Return Types</h3>\r\n                    <ul>\r\n                        <li><span class=\"mono blue\">void</span>: means the function does not return a value</li>\r\n                        <br>\r\n                        <li><span class=\"mono blue\">int</span>: returns an integer value</li>\r\n                        <br>\r\n                        <li><span class=\"mono blue\">float</span>: returns a floating-point value</li>\r\n                        <br>\r\n                        <li><span class=\"mono blue\">double</span>: returns a double-precision floating-point value</li>\r\n                        <br>\r\n                        <li><span class=\"mono blue\">char</span>: returns a character value</li>\r\n                        <br>\r\n                        <li><span class=\"mono blue\">bool</span>: returns a boolean value (in C99 and later)</li>\r\n                        <br>\r\n                        <li><span class=\"mono blue\">pointer</span>: returns a pointer to a location in memory</li>\r\n                    </ul>\r\n                </div>');

-- --------------------------------------------------------

--
-- Table structure for table `dinos`
--

CREATE TABLE `dinos` (
  `id` int(11) NOT NULL,
  `username` varchar(225) NOT NULL,
  `profile_pic` varchar(225) NOT NULL DEFAULT '../site/default.user.png',
  `first_name` varchar(225) DEFAULT NULL,
  `last_name` varchar(225) DEFAULT NULL,
  `email` varchar(225) NOT NULL,
  `password` varchar(225) NOT NULL,
  `create_time` datetime NOT NULL DEFAULT current_timestamp(),
  `update_time` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `tests`
--

CREATE TABLE `tests` (
  `id` int(11) NOT NULL,
  `chapter` varchar(225) NOT NULL,
  `question` text NOT NULL,
  `option_a` varchar(225) NOT NULL,
  `option_b` varchar(225) NOT NULL,
  `option_c` varchar(225) NOT NULL,
  `option_d` varchar(225) NOT NULL,
  `board` tinyint(1) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `tokens`
--

CREATE TABLE `tokens` (
  `id` int(11) NOT NULL,
  `selector` varchar(255) NOT NULL,
  `hashed_validator` varchar(255) NOT NULL,
  `user_id` int(11) NOT NULL,
  `expiry` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `c_sections`
--
ALTER TABLE `c_sections`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `dinos`
--
ALTER TABLE `dinos`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`),
  ADD UNIQUE KEY `EMAIL` (`email`);

--
-- Indexes for table `tests`
--
ALTER TABLE `tests`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tokens`
--
ALTER TABLE `tokens`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_user_id` (`user_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `c_sections`
--
ALTER TABLE `c_sections`
  MODIFY `id` int(225) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- AUTO_INCREMENT for table `dinos`
--
ALTER TABLE `dinos`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `tests`
--
ALTER TABLE `tests`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `tokens`
--
ALTER TABLE `tokens`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `tokens`
--
ALTER TABLE `tokens`
  ADD CONSTRAINT `fk_user_id` FOREIGN KEY (`user_id`) REFERENCES `dinos` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
